// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: giveaway.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GiveAwayDispatchType is the type of dispatch for a GiveAway
type GiveAwayDispatchType int32

const (
	GiveAwayDispatchType_GIVEAWAY_PICKUP   GiveAwayDispatchType = 0
	GiveAwayDispatchType_GIVEAWAY_DELIVERY GiveAwayDispatchType = 1
)

// Enum value maps for GiveAwayDispatchType.
var (
	GiveAwayDispatchType_name = map[int32]string{
		0: "GIVEAWAY_PICKUP",
		1: "GIVEAWAY_DELIVERY",
	}
	GiveAwayDispatchType_value = map[string]int32{
		"GIVEAWAY_PICKUP":   0,
		"GIVEAWAY_DELIVERY": 1,
	}
)

func (x GiveAwayDispatchType) Enum() *GiveAwayDispatchType {
	p := new(GiveAwayDispatchType)
	*p = x
	return p
}

func (x GiveAwayDispatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GiveAwayDispatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_giveaway_proto_enumTypes[0].Descriptor()
}

func (GiveAwayDispatchType) Type() protoreflect.EnumType {
	return &file_giveaway_proto_enumTypes[0]
}

func (x GiveAwayDispatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GiveAwayDispatchType.Descriptor instead.
func (GiveAwayDispatchType) EnumDescriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{0}
}

// GiveAwayByCoordinatesAndRadiusRequest is the request for getting GiveAway by coordinates and radius
type GiveAwayByCoordinatesAndRadiusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *GiveAwayCoordinates `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Radius      float32              `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *GiveAwayByCoordinatesAndRadiusRequest) Reset() {
	*x = GiveAwayByCoordinatesAndRadiusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_giveaway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveAwayByCoordinatesAndRadiusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveAwayByCoordinatesAndRadiusRequest) ProtoMessage() {}

func (x *GiveAwayByCoordinatesAndRadiusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveAwayByCoordinatesAndRadiusRequest.ProtoReflect.Descriptor instead.
func (*GiveAwayByCoordinatesAndRadiusRequest) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{0}
}

func (x *GiveAwayByCoordinatesAndRadiusRequest) GetCoordinates() *GiveAwayCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *GiveAwayByCoordinatesAndRadiusRequest) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// GiveAwayList is the list of GiveAways
type GiveAwayList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Giveaways []*GiveAway `protobuf:"bytes,1,rep,name=giveaways,proto3" json:"giveaways,omitempty"`
}

func (x *GiveAwayList) Reset() {
	*x = GiveAwayList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_giveaway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveAwayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveAwayList) ProtoMessage() {}

func (x *GiveAwayList) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveAwayList.ProtoReflect.Descriptor instead.
func (*GiveAwayList) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{1}
}

func (x *GiveAwayList) GetGiveaways() []*GiveAway {
	if x != nil {
		return x.Giveaways
	}
	return nil
}

// CreateGiveAwayRequest is the request for creating a GiveAway
type CreateGiveAwayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description      string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Images           []string             `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	Coordinates      *GiveAwayCoordinates `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	DispatchType     GiveAwayDispatchType `protobuf:"varint,5,opt,name=dispatch_type,json=dispatchType,proto3,enum=event.GiveAwayDispatchType" json:"dispatch_type,omitempty"`
	DispatchDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=dispatch_duration,json=dispatchDuration,proto3" json:"dispatch_duration,omitempty"`
}

func (x *CreateGiveAwayRequest) Reset() {
	*x = CreateGiveAwayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_giveaway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGiveAwayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGiveAwayRequest) ProtoMessage() {}

func (x *CreateGiveAwayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGiveAwayRequest.ProtoReflect.Descriptor instead.
func (*CreateGiveAwayRequest) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGiveAwayRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGiveAwayRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateGiveAwayRequest) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateGiveAwayRequest) GetCoordinates() *GiveAwayCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *CreateGiveAwayRequest) GetDispatchType() GiveAwayDispatchType {
	if x != nil {
		return x.DispatchType
	}
	return GiveAwayDispatchType_GIVEAWAY_PICKUP
}

func (x *CreateGiveAwayRequest) GetDispatchDuration() *durationpb.Duration {
	if x != nil {
		return x.DispatchDuration
	}
	return nil
}

// GiveAway is the model for a GiveAway
type GiveAway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Images      []string               `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	Owner       string                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coordinates *GiveAwayCoordinates   `protobuf:"bytes,8,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *GiveAway) Reset() {
	*x = GiveAway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_giveaway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveAway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveAway) ProtoMessage() {}

func (x *GiveAway) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveAway.ProtoReflect.Descriptor instead.
func (*GiveAway) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{3}
}

func (x *GiveAway) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GiveAway) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiveAway) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GiveAway) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *GiveAway) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GiveAway) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GiveAway) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GiveAway) GetCoordinates() *GiveAwayCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

// GiveAwayCoordinates is the coordinates of a GiveAway
type GiveAwayCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Latitude  float32 `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GiveAwayCoordinates) Reset() {
	*x = GiveAwayCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_giveaway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveAwayCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveAwayCoordinates) ProtoMessage() {}

func (x *GiveAwayCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveAwayCoordinates.ProtoReflect.Descriptor instead.
func (*GiveAwayCoordinates) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{4}
}

func (x *GiveAwayCoordinates) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GiveAwayCoordinates) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GiveAwayCoordinates) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

var File_giveaway_proto protoreflect.FileDescriptor

var file_giveaway_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x25, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x42, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65,
	0x41, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69,
	0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x08, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x13, 0x47, 0x69, 0x76, 0x65,
	0x41, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x42, 0x0a, 0x14, 0x47,
	0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x49, 0x56, 0x45, 0x41, 0x57, 0x41, 0x59, 0x5f,
	0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x49, 0x56, 0x45,
	0x41, 0x57, 0x41, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x32,
	0xf6, 0x04, 0x0a, 0x0f, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61,
	0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x30,
	0x01, 0x12, 0x4d, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x30, 0x01,
	0x12, 0x51, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x13, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x27, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x42,
	0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x69, 0x76, 0x65, 0x41, 0x77, 0x61, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x47, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x28, 0x5a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x71, 0x75, 0x61, 0x62, 0x79, 0x6e, 0x61, 0x68, 0x2d,
	0x62, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x68, 0x65, 0x3b, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_giveaway_proto_rawDescOnce sync.Once
	file_giveaway_proto_rawDescData = file_giveaway_proto_rawDesc
)

func file_giveaway_proto_rawDescGZIP() []byte {
	file_giveaway_proto_rawDescOnce.Do(func() {
		file_giveaway_proto_rawDescData = protoimpl.X.CompressGZIP(file_giveaway_proto_rawDescData)
	})
	return file_giveaway_proto_rawDescData
}

var file_giveaway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_giveaway_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_giveaway_proto_goTypes = []interface{}{
	(GiveAwayDispatchType)(0),                     // 0: event.GiveAwayDispatchType
	(*GiveAwayByCoordinatesAndRadiusRequest)(nil), // 1: event.GiveAwayByCoordinatesAndRadiusRequest
	(*GiveAwayList)(nil),                          // 2: event.GiveAwayList
	(*CreateGiveAwayRequest)(nil),                 // 3: event.CreateGiveAwayRequest
	(*GiveAway)(nil),                              // 4: event.GiveAway
	(*GiveAwayCoordinates)(nil),                   // 5: event.GiveAwayCoordinates
	(*durationpb.Duration)(nil),                   // 6: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                 // 7: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),                // 8: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                         // 9: google.protobuf.Empty
}
var file_giveaway_proto_depIdxs = []int32{
	5,  // 0: event.GiveAwayByCoordinatesAndRadiusRequest.coordinates:type_name -> event.GiveAwayCoordinates
	4,  // 1: event.GiveAwayList.giveaways:type_name -> event.GiveAway
	5,  // 2: event.CreateGiveAwayRequest.coordinates:type_name -> event.GiveAwayCoordinates
	0,  // 3: event.CreateGiveAwayRequest.dispatch_type:type_name -> event.GiveAwayDispatchType
	6,  // 4: event.CreateGiveAwayRequest.dispatch_duration:type_name -> google.protobuf.Duration
	7,  // 5: event.GiveAway.created_at:type_name -> google.protobuf.Timestamp
	7,  // 6: event.GiveAway.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 7: event.GiveAway.coordinates:type_name -> event.GiveAwayCoordinates
	3,  // 8: event.GiveAwayService.create_giveaway:input_type -> event.CreateGiveAwayRequest
	8,  // 9: event.GiveAwayService.get_giveaway:input_type -> google.protobuf.StringValue
	9,  // 10: event.GiveAwayService.get_giveaways:input_type -> google.protobuf.Empty
	8,  // 11: event.GiveAwayService.get_giveaways_by_owner:input_type -> google.protobuf.StringValue
	5,  // 12: event.GiveAwayService.get_giveaways_by_coordinates:input_type -> event.GiveAwayCoordinates
	1,  // 13: event.GiveAwayService.get_giveaways_by_coordinates_and_radius:input_type -> event.GiveAwayByCoordinatesAndRadiusRequest
	4,  // 14: event.GiveAwayService.update_giveaway:input_type -> event.GiveAway
	8,  // 15: event.GiveAwayService.delete_giveaway:input_type -> google.protobuf.StringValue
	8,  // 16: event.GiveAwayService.create_giveaway:output_type -> google.protobuf.StringValue
	4,  // 17: event.GiveAwayService.get_giveaway:output_type -> event.GiveAway
	2,  // 18: event.GiveAwayService.get_giveaways:output_type -> event.GiveAwayList
	2,  // 19: event.GiveAwayService.get_giveaways_by_owner:output_type -> event.GiveAwayList
	2,  // 20: event.GiveAwayService.get_giveaways_by_coordinates:output_type -> event.GiveAwayList
	2,  // 21: event.GiveAwayService.get_giveaways_by_coordinates_and_radius:output_type -> event.GiveAwayList
	9,  // 22: event.GiveAwayService.update_giveaway:output_type -> google.protobuf.Empty
	9,  // 23: event.GiveAwayService.delete_giveaway:output_type -> google.protobuf.Empty
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_giveaway_proto_init() }
func file_giveaway_proto_init() {
	if File_giveaway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_giveaway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveAwayByCoordinatesAndRadiusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_giveaway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveAwayList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_giveaway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGiveAwayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_giveaway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveAway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_giveaway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveAwayCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_giveaway_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_giveaway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_giveaway_proto_goTypes,
		DependencyIndexes: file_giveaway_proto_depIdxs,
		EnumInfos:         file_giveaway_proto_enumTypes,
		MessageInfos:      file_giveaway_proto_msgTypes,
	}.Build()
	File_giveaway_proto = out.File
	file_giveaway_proto_rawDesc = nil
	file_giveaway_proto_goTypes = nil
	file_giveaway_proto_depIdxs = nil
}
